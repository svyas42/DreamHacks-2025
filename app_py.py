# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V7vlF540xqUnDTWYQf3DYppfdwaAfAMB
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import csv
# import os
# import streamlit as st
# from gtts import gTTS
# 
# # Speak text using gTTS
# def speak_text(text):
#     try:
#         tts = gTTS(text, lang='en')
#         tts.save("audio.mp3")
#         st.audio("audio.mp3")
#     except Exception as e:
#         st.error(f"[Speech error: {e}]")
# 
# # Load resources from CSV file
# def load_resources(filename):
#     resources = []
#     try:
#         with open(filename, newline='') as csvfile:
#             reader = csv.DictReader(csvfile)
#             for row in reader:
#                 row['Services'] = [s.strip().lower() for s in row['Services'].split(';')]
#                 row['WheelchairAccessible'] = row['WheelchairAccessible'].strip().lower() == "yes"
#                 resources.append(row)
#         return resources
#     except Exception as e:
#         st.error(f"Error loading resources: {e}")
#         return []
# 
# # Display resources
# def display_resources(resources, city, zip_code, state, service):
#     filtered = [res for res in resources if
#                 (city in res["City"].lower() or not city) and
#                 (zip_code == res["ZIP"] or not zip_code) and
#                 (state in res["State"].lower() or not state) and
#                 (any(service in s for s in res['Services']) or not service)
#                ]
#     if not filtered:
#         st.warning("No resources found.")
#         speak_text("No resources found.")
#     else:
#         for i, res in enumerate(filtered, start=1):
#             accessible = "Yes" if res["WheelchairAccessible"] else "No"
#             info = (
#                 f"**{i}. {res['Name']}**\n"
#                 f"- Address: {res['Address']}\n"
#                 f"- City: {res['City']}, State: {res['State']}, ZIP: {res['ZIP']}\n"
#                 f"- Phone: {res['Phone']}\n"
#                 f"- Wheelchair Accessible: {accessible}\n"
#                 f"- Services: {', '.join(res['Services'])}\n"
#             )
#             st.markdown(info)
#             speak_text(f"Resource {i}: {res['Name']}, located at {res['Address']}, {res['City']}, {res['State']}.")
# 
# # Load resources
# resources = load_resources("resources.csv")
# reminders = []
# 
# # Streamlit UI
# st.title("Accessible Health Resource Finder and Reminder")
# 
# # Search section
# st.header("Search for Resources")
# city = st.text_input("Enter city:").strip().lower()
# zip_code = st.text_input("Enter ZIP code:").strip()
# state = st.text_input("Enter state:").strip().lower()
# service = st.text_input("Enter service:").strip().lower()
# 
# if st.button("Search Resources"):
#     display_resources(resources, city, zip_code, state, service)
# 
# # Reminder section
# st.header("Add Health Appointment Reminder")
# date_time = st.text_input("Date and Time (YYYY-MM-DD HH:MM):").strip()
# description = st.text_input("Reminder description:").strip()
# location = st.text_input("Location:").strip()
# phone = st.text_input("Phone number:").strip()
# 
# if st.button("Add Reminder"):
#     reminders.append({
#         "date_time": date_time,
#         "description": description,
#         "location": location,
#         "phone": phone
#     })
#     st.success("Reminder added!")
#     speak_text("Reminder added!")
# 
# # List reminders
# st.header("Your Health Appointment Reminders")
# if st.button("List Reminders"):
#     if reminders:
#         for i, rem in enumerate(reminders, 1):
#             st.markdown(f"**{i}. {rem['date_time']} - {rem['description']} at {rem['location']} (Phone: {rem['phone']})**")
#             speak_text(f"Reminder {i}: {rem['description']} at {rem['location']} on {rem['date_time']}.")
#     else:
#         st.warning("No reminders set.")
#